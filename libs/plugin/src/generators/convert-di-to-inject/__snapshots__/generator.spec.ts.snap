// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`convertDiToInjectGenerator should add the readonly keyword to converted fields 1`] = `
"
    import { Component, inject, HostAttributeToken } from '@angular/core';
    @Component({
      template: ''
    })
    export class MyComponent {
      private readonly type = inject<string>(new HostAttributeToken('type'));
      private readonly service = inject<MyService>('my-service' as any /* TODO(inject-migration): Please check if the type is correct */);
      private readonly service4 = inject(MyService4);
      private readonly service5 = inject<MyService5>('my-service2' as any /* TODO(inject-migration): Please check if the type is correct */, { optional: true });
      private readonly someToken = inject(SOME_TOKEN);
      private readonly service2 = inject(MyService2);
      service3: MyService3;

      constructor(
) {
            const service3 = inject(MyService3);

        this.service3 = service3;
      }
    }
"
`;

exports[`convertDiToInjectGenerator should add the readonly keyword to converted native private fields 1`] = `
"
    import { Component, inject, HostAttributeToken } from '@angular/core';
    @Component({
      template: ''
    })
    export class MyComponent {
      readonly #type = inject<string>(new HostAttributeToken('type'));
      readonly #service = inject<MyService>('my-service' as any /* TODO(inject-migration): Please check if the type is correct */);
      readonly #service4 = inject(MyService4);
      readonly #service5 = inject<MyService5>('my-service2' as any /* TODO(inject-migration): Please check if the type is correct */, { optional: true });
      readonly #someToken = inject(SOME_TOKEN);
      readonly #service2 = inject(MyService2);
      service3: MyService3;

      constructor(
) {
            const service3 = inject(MyService3);

        this.service3 = service3;
      }
    }
"
`;

exports[`convertDiToInjectGenerator should add this keyword to all assignments in constructor 1`] = `
"
    import { Component, inject } from '@angular/core';

    @Component({
      template: ''
    })
    export class MyComponent {
      private service = inject(Service);
      depOne$: Observable<string>;
      depTwo$: Observable<string>;
      depThree$: Observable<string>;
      depFour$: Observable<string>;

      constructor() {
        this.depOne$ = this.service.depOne$;
        this.depTwo$ = this.service.depTwo$;
        this.depThree$ = this.service.depThree$;
        this.depFour$ = this.service.depFour$;
      }
    }
"
`;

exports[`convertDiToInjectGenerator should convert private modifier fields to native private fields 1`] = `
"
    import { Component, inject } from '@angular/core';
    @Component({
      template: ''
    })
    export class MyComponent {
      #myService = inject(MyService);
      #elRef = inject<ElementRef<HtmlImageElement>>(ElementRef<HtmlImageElement>);
      #tplRef = inject<TemplateRef<any>>(TemplateRef<any>);
      #viewContainerRef = inject(ViewContainerRef);

      constructor(
) {
            const service2 = inject(MyService2);

        this.#myService.doSomething();

        service2.doSomethingElse();

        service2.doSomething();

        someList.forEach(() => {
          // nested scope
          this.#myService.doSomething();
        });

        // use service in a function call
        someFunction(service2).test(this.#myService);

        this.service7.getTask();
        this.service8.getTick();
      }

      #service = inject<MyService>('my-service' as any /* TODO(inject-migration): Please check if the type is correct */);
      #service4 = inject(MyService4);
      #service5 = inject<MyService5>('my-service2' as any /* TODO(inject-migration): Please check if the type is correct */, { optional: true });
      #service6 = inject(MyService6, { self: true, optional: true });
      protected service7 = inject(MyService7);
      public service8 = inject(MyService8);

      myMethod() {
        this.#myService.doCompleteTask();
        this.service7.getTask();
        this.service8.getTick();
      }

      get value() {
        return this.#myService.getValue();
      }
    
      set value(theAge: number) {
        this.#myService.setValue();
      }
    }
"
`;

exports[`convertDiToInjectGenerator should convert properly 1`] = `
"
    import { Component, ElementRef, inject, HostAttributeToken } from '@angular/core';
    @Component({
      template: ''
    })
    export class MyComponent {
      private service = inject(MyService);
      private readonly service2 = inject<ElementRef<HtmlImageElement>>(ElementRef<HtmlImageElement>);

      constructor(
) {
            const type = inject<string>(new HostAttributeToken('type'), { optional: true });
}
    }
  "
`;

exports[`convertDiToInjectGenerator should convert properly with @Inject decorator 1`] = `
"
    import { Component, inject, HostAttributeToken } from '@angular/core';
    @Component({
      template: ''
    })
    export class MyComponent {
      private type = inject<string>(new HostAttributeToken('type'));
      private service = inject<MyService>('my-service' as any /* TODO(inject-migration): Please check if the type is correct */);
      private service4 = inject(MyService4);
      private service5 = inject<MyService5>('my-service2' as any /* TODO(inject-migration): Please check if the type is correct */, { optional: true });
      private someToken = inject(SOME_TOKEN);
      private service2 = inject(MyService2);
      service3: MyService3;

      constructor(
) {
            const service3 = inject(MyService3);

        this.service3 = service3;
      }
    }
"
`;

exports[`convertDiToInjectGenerator should convert properly with @Inject decorator and options 1`] = `
"
    import { Component, inject } from '@angular/core';
    @Component({
      template: ''
    })
    export class MyComponent {
      private myService = inject(MyService);
      private elRef = inject<ElementRef<HtmlImageElement>>(ElementRef<HtmlImageElement>);
      private tplRef = inject<TemplateRef<any>>(TemplateRef<any>);
      private viewContainerRef = inject(ViewContainerRef);

      constructor(
) {
            const service2 = inject(MyService2);

        this.myService.doSomething();

        service2.doSomethingElse();

        service2.doSomething();

        someList.forEach(() => {
          // nested scope
          this.myService.doSomething();
        });

        // use service in a function call
        someFunction(service2).test(this.myService);
      }

      private service = inject<MyService>('my-service' as any /* TODO(inject-migration): Please check if the type is correct */);
      private service4 = inject(MyService4);
      private service5 = inject<MyService5>('my-service2' as any /* TODO(inject-migration): Please check if the type is correct */, { optional: true });
      private service6 = inject(MyService6, { self: true, optional: true });
    }
"
`;

exports[`convertDiToInjectGenerator should convert properly with usage 1`] = `
"
    import { Component, inject } from '@angular/core';
    @Component({
      template: ''
    })
    export class MyComponent {
      private service = inject(MyService);
      private readonly service1 = inject<MyService1<string>>(MyService1<string>);

      constructor(
) {
        this.service.doSomething();
      }
    }
  "
`;

exports[`convertDiToInjectGenerator should convert properly with usage local 1`] = `
"
    import { Component, inject } from '@angular/core';
    @Component({
      template: ''
    })
    export class MyComponent {
      constructor() {
            const service = inject(MyService);

        service.doSomething();
        service.doSomethingElse();
      }
    }
  "
`;

exports[`convertDiToInjectGenerator should convert properly with usage local no scope 1`] = `
"
    import { Component, inject } from '@angular/core';
    @Component({
      template: ''
    })
    export class MyComponent {
      constructor() {
            const service = inject(MyService);

        service.doSomething();

        someList.forEach(() => {
          // nested scope
          service.doSomething();
        });

        // use service in a function call
        someFunction(service);
      }
    }
  "
`;

exports[`convertDiToInjectGenerator should not do anything if no dep 1`] = `
"
    import { Component } from '@angular/core';
    @Component({
      template: ''
    })
    export class MyComponent {
      constructor() {
        console.log('hello');
      }
    }"
`;
